{"ast":null,"code":"var _jsxFileName = \"/home/rodolfoarv/Documents/Gattai/AskRobinDelivery/Server1/batman/src/components/Form/Form.jsx\";\nimport React from 'react';\nimport Container from 'react-bulma-components/lib/components/container';\nimport Columns from 'react-bulma-components/lib/components/columns';\nimport Button from 'react-bulma-components/lib/components/button';\nimport { Field, Control, Label, Input, Checkbox, Select } from 'react-bulma-components/lib/components/form';\nimport { toast } from 'react-toastify';\n\nclass Form extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...this.props.initialState\n    };\n    this.dateToShow = new Date();\n    this.isLoading = false;\n    this.fields = this.props.fields;\n\n    this.renderSelectOptions = opts => Object.entries(opts).map(o => React.createElement(\"option\", {\n      key: o[0],\n      value: o[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, o[1]));\n\n    this.handleFocus = event => event.target.select();\n\n    this.renderSingleField = field => {\n      switch (field.type) {\n        case 'select':\n          return React.createElement(Select, {\n            name: field.key,\n            onChange: this.onChange,\n            value: this.state[field.key],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, \"Select...\"), field.options && this.renderSelectOptions(field.options));\n\n        case 'checkbox':\n          return React.createElement(Checkbox, Object.assign({}, field, {\n            name: field.key,\n            onChange: this.onChange,\n            checked: this.state.active_flag,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }), field.label);\n\n        default:\n          return React.createElement(Input, Object.assign({}, field, {\n            name: field.key,\n            onChange: this.onChange,\n            value: this.state[field.key],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          }));\n      }\n    };\n\n    this.renderFields = fields => {\n      return fields.map(field => {\n        const isCheckbox = field.type === 'checkbox';\n        return React.createElement(Field, {\n          key: `field-${field.key}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, !isCheckbox && React.createElement(Label, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, field.label), React.createElement(Control, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, this.renderSingleField(field)));\n      });\n    };\n\n    this.onChange = evt => {\n      const value = evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value;\n      this.setState({\n        [evt.target.name]: value\n      });\n    };\n\n    this.validate = () => {\n      const keys = Object.entries(this.props.initialState).map(e => e[0]);\n      let isValid = true;\n\n      for (let i = 0; i < keys.length; i++) {\n        if (!this.state[keys[i]]) {\n          if (typeof this.state[keys[i]] === \"number\" && this.state[keys[i]] === 0) {\n            break;\n          }\n\n          isValid = false;\n          toast.warn('All fields are required');\n          break;\n        }\n      } // To prevent duplicate alert\n\n\n      if (!isValid) return isValid;\n      const {\n        shouldNotExist\n      } = this.props;\n\n      if (shouldNotExist) {\n        for (let j = 0; j < shouldNotExist.length; j++) {\n          if (Object.entries(this.fbCollection).find(record => record[1][shouldNotExist[j]] === this.state[shouldNotExist[j]])) {\n            // if exists\n            isValid = false;\n            toast.warn(`Field: ${shouldNotExist[j]} can't be duplicated`);\n            break;\n          }\n        }\n      }\n\n      return isValid;\n    };\n\n    this.save = () => {\n      this.props.onSave && this.props.onSave(this.state);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, this.state.returnToCollection && this.renderRedirect(), React.createElement(Container, {\n      className: 'pad-und-md fb-form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Columns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Columns.Column, {\n      size: \"half\",\n      offset: \"one-quarter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Columns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Columns.Column, {\n      size: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.renderFields(this.fields), React.createElement(Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Control, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(Columns.Column, {\n      size: \"half\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"solid\",\n      onClick: this.save,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Save\")), React.createElement(Columns.Column, {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, this.props.after))))));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/rodolfoarv/Documents/Gattai/AskRobinDelivery/Server1/batman/src/components/Form/Form.jsx"],"names":["React","Container","Columns","Button","Field","Control","Label","Input","Checkbox","Select","toast","Form","Component","state","props","initialState","dateToShow","Date","isLoading","fields","renderSelectOptions","opts","Object","entries","map","o","handleFocus","event","target","select","renderSingleField","field","type","key","onChange","options","active_flag","label","renderFields","isCheckbox","evt","value","checked","setState","name","validate","keys","e","isValid","i","length","warn","shouldNotExist","j","fbCollection","find","record","save","onSave","render","returnToCollection","renderRedirect","textAlign","after"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Container from 'react-bulma-components/lib/components/container';\nimport Columns from 'react-bulma-components/lib/components/columns';\nimport Button from 'react-bulma-components/lib/components/button';\nimport {\n    Field,\n    Control,\n    Label,\n    Input,\n    Checkbox,\n    Select\n  } from 'react-bulma-components/lib/components/form';\n  import {toast} from 'react-toastify';\n\nclass Form extends React.Component {\n    state = {\n        ...this.props.initialState,\n    };\n\n    dateToShow = new Date();\n   \n\n    isLoading = false;\n\n    fields = this.props.fields;\n\n    renderSelectOptions = opts => (\n        Object.entries(opts).map(o => (\n            <option key={o[0]} value={o[0]}>{o[1]}</option>\n        ))\n    )\n\n    handleFocus = event => event.target.select();\n\n    renderSingleField = field => {\n        switch(field.type) {\n            case 'select':\n                return (\n                    <Select\n                        name={field.key}\n                        onChange={this.onChange}\n                        value={this.state[field.key]} \n                    >\n                        <option value=''>Select...</option>\n                        {\n                            field.options &&\n                            this.renderSelectOptions(field.options)\n                        }\n                    </Select>                                        \n                );\n            case 'checkbox':\n                return (<Checkbox\n                    {...field}\n                    name={field.key}\n                    onChange={this.onChange}\n                    checked={this.state.active_flag}\n                >\n                    {field.label}\n                </Checkbox>);           \n            default:\n                return (<Input \n                        {...field}\n                        name={field.key}\n                        onChange={this.onChange}\n                        value={this.state[field.key]} \n                    />)\n        }        \n    }\n\n    renderFields = fields => {\n        return fields.map(field => {\n        const isCheckbox = field.type === 'checkbox';\n            return (\n                <Field key={`field-${field.key}`}>\n                    {   !isCheckbox &&\n                        <Label>{field.label}</Label>\n                    }\n                    <Control>\n                        {this.renderSingleField(field)}\n                    </Control>\n                </Field>        \n            )\n        });\n    }\n\n    onChange = evt => {\n        const value = evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value;\n        this.setState({\n          [evt.target.name]: value,\n        });\n    };\n\n    validate = () => {\n        const keys = Object.entries(this.props.initialState).map(e => e[0]);\n        let isValid = true;\n        for (let i = 0; i < keys.length; i++) {\n            if (!this.state[keys[i]]) {\n                if (typeof this.state[keys[i]] === \"number\" && this.state[keys[i]] === 0) {\n                    break;\n                }\n                \n                isValid = false;\n                toast.warn('All fields are required');\n                break;\n            }\n        }\n\n        // To prevent duplicate alert\n        if (!isValid) return isValid;\n\n        const {\n            shouldNotExist,\n        } = this.props;\n\n        if (shouldNotExist) {\n            for (let j = 0; j < shouldNotExist.length; j++) {\n                if (Object.entries(this.fbCollection).find(record => record[1][shouldNotExist[j]] === this.state[shouldNotExist[j]])) { // if exists\n                    isValid = false;\n                    toast.warn(`Field: ${shouldNotExist[j]} can't be duplicated`);\n                    break;\n                }\n            }\n        }\n\n        return isValid;\n    }\n    \n    save = () => {\n        this.props.onSave && this.props.onSave(this.state);\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.returnToCollection &&\n                    this.renderRedirect()\n                }\n                <Container className={'pad-und-md fb-form'}>\n                    <Columns>\n                        <Columns.Column size='half' offset='one-quarter'>\n                            <Columns>\n                                <Columns.Column size={12}>\n                                    {this.renderFields(this.fields)}\n                                <Field>\n                                <Control>\n\n                                </Control>\n                                </Field>                                 \n                                </Columns.Column>\n                                <Columns.Column size='half'>\n                                    <Button className='solid' onClick={this.save}>Save</Button>\n                                </Columns.Column> \n                                <Columns.Column style={{textAlign: 'center'}}>\n                                    {this.props.after}\n                                </Columns.Column>                        \n                            </Columns>         \n                        </Columns.Column>\n                    </Columns>\n                </Container>\n            </div>    \n        )\n    }\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}